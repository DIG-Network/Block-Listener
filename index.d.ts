/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface DnsDiscoveryErrorInfo {
  message: string
  errorType: string
}
export interface PeerAddressJs {
  host: string
  port: number
  isIpv6: boolean
  displayAddress: string
}
export interface DiscoveryResultJs {
  ipv4Peers: Array<PeerAddressJs>
  ipv6Peers: Array<PeerAddressJs>
  totalCount: number
}
export interface AddressResult {
  addresses: Array<string>
  count: number
}
export interface CoinInfoJs {
  parentCoinInfo: string
  puzzleHash: string
  amount: string
}
export interface CoinSpendInfoJs {
  coin: CoinInfoJs
  puzzleReveal: string
  solution: string
  realData: boolean
  parsingMethod: string
  offset: number
  createdCoins: Array<CoinInfoJs>
}
export interface ParsedBlockJs {
  height: number
  weight: string
  headerHash: string
  timestamp?: number
  coinAdditions: Array<CoinInfoJs>
  coinRemovals: Array<CoinInfoJs>
  coinSpends: Array<CoinSpendInfoJs>
  coinCreations: Array<CoinInfoJs>
  hasTransactionsGenerator: boolean
  generatorSize?: number
}
export interface GeneratorBlockInfoJs {
  prevHeaderHash: string
  transactionsGenerator?: string
  transactionsGeneratorRefList: Array<number>
}
export interface BlockHeightInfoJs {
  height: number
  isTransactionBlock: boolean
}
export interface EventTypes {
  blockReceived: string
  peerConnected: string
  peerDisconnected: string
}
export declare function getEventTypes(): EventTypes
export interface PeerConnectedEvent {
  peerId: string
  host: string
  port: number
}
export interface PeerDisconnectedEvent {
  peerId: string
  host: string
  port: number
  message?: string
}
export interface BlockReceivedEvent {
  peerId: string
  height: number
  weight: string
  headerHash: string
  timestamp: number
  coinAdditions: Array<CoinRecord>
  coinRemovals: Array<CoinRecord>
  coinSpends: Array<CoinSpend>
  coinCreations: Array<CoinRecord>
  hasTransactionsGenerator: boolean
  generatorSize: number
}
export interface CoinRecord {
  parentCoinInfo: string
  puzzleHash: string
  amount: string
}
export interface CoinSpend {
  coin: CoinRecord
  puzzleReveal: string
  solution: string
  offset: number
}
export interface NewPeakHeightEvent {
  oldPeak?: number
  newPeak: number
  peerId: string
}
export declare function initTracing(): void
export declare class ChiaBlockParser {
  /** Create a new block parser */
  constructor()
  /** Parse a FullBlock from bytes */
  parseFullBlockFromBytes(blockBytes: Buffer): ParsedBlockJs
  /** Parse a FullBlock from hex string */
  parseFullBlockFromHex(blockHex: string): ParsedBlockJs
  /** Extract generator from block bytes */
  extractGeneratorFromBlockBytes(blockBytes: Buffer): string | null
  /** Get block height and transaction status from block bytes */
  getHeightAndTxStatusFromBlockBytes(blockBytes: Buffer): BlockHeightInfoJs
  /** Parse block info from block bytes */
  parseBlockInfoFromBytes(blockBytes: Buffer): GeneratorBlockInfoJs
}
export declare class DnsDiscoveryClient {
  /** Create a new DNS discovery client */
  constructor()
  /** Discover peers for Chia mainnet */
  discoverMainnetPeers(): Promise<DiscoveryResultJs>
  /** Discover peers for Chia testnet11 */
  discoverTestnet11Peers(): Promise<DiscoveryResultJs>
  /** Discover peers using custom introducers */
  discoverPeers(introducers: Array<string>, defaultPort: number): Promise<DiscoveryResultJs>
  /** Resolve IPv4 addresses (A records) for a hostname */
  resolveIpv4(hostname: string): Promise<AddressResult>
  /** Resolve IPv6 addresses (AAAA records) for a hostname */
  resolveIpv6(hostname: string): Promise<AddressResult>
  /** Resolve both IPv4 and IPv6 addresses for a hostname */
  resolveBoth(hostname: string, port: number): Promise<DiscoveryResultJs>
}
export declare class ChiaBlockListener {
  constructor()
  addPeer(host: string, port: number, networkId: string): string
  disconnectPeer(peerId: string): boolean
  disconnectAllPeers(): void
  getConnectedPeers(): Array<string>
  on(event: string, callback: (...args: any[]) => any): void
  off(event: string, callback: (...args: any[]) => any): void
  getBlockByHeight(peerId: string, height: number): BlockReceivedEvent
  getBlocksRange(peerId: string, startHeight: number, endHeight: number): Array<BlockReceivedEvent>
}
export declare class ChiaPeerPool {
  constructor()
  addPeer(host: string, port: number, networkId: string): Promise<string>
  getBlockByHeight(height: number): Promise<BlockReceivedEvent>
  removePeer(peerId: string): Promise<boolean>
  shutdown(): Promise<void>
  getConnectedPeers(): Promise<Array<string>>
  getPeakHeight(): Promise<number | null>
  on(event: string, callback: (...args: any[]) => any): void
  off(event: string, callback: (...args: any[]) => any): void
}
