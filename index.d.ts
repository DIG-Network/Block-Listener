/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface BlockReceivedEvent {
  peerId: number
  height: number
  weight: string
  headerHash: string
  timestamp: number
  coinAdditions: Array<CoinRecord>
  coinRemovals: Array<CoinRecord>
  coinSpends: Array<CoinSpend>
  coinCreations: Array<CoinRecord>
  hasTransactionsGenerator: boolean
  generatorSize: number
  generatorBytecode?: string
}
export interface Block {
  height: number
  weight: string
  headerHash: string
  timestamp: number
  coinAdditions: Array<CoinRecord>
  coinRemovals: Array<CoinRecord>
  coinSpends: Array<CoinSpend>
  coinCreations: Array<CoinRecord>
  hasTransactionsGenerator: boolean
  generatorSize: number
  generatorBytecode?: string
}
export interface CoinRecord {
  parentCoinInfo: string
  puzzleHash: string
  amount: string
}
export interface CoinSpend {
  coin: CoinRecord
  puzzleReveal: string
  solution: string
  realData: boolean
  parsingMethod: string
  offset: number
}
export interface TransactionGeneratorResult {
  
}
export declare function initTracing(): void
export declare class ChiaBlockListener {
  constructor()
  addPeer(host: string, port: number, networkId: string): number
  disconnectPeer(peerId: number): boolean
  disconnectAllPeers(): void
  getConnectedPeers(): Array<number>
  on(event: string, callback: (...args: any[]) => any): void
  off(event: string, callback: (...args: any[]) => any): void
  getBlockByHeight(peerId: number, height: number): Block
  getBlocksRange(peerId: number, startHeight: number, endHeight: number): Array<Block>
  processTransactionGenerator(generatorHex: string): object
}
