/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Block {
  height: number
  weight: string
  headerHash: string
  timestamp: number
  coinAdditions: Array<CoinRecord>
  coinRemovals: Array<CoinRecord>
  hasTransactionsGenerator: boolean
  generatorSize: number
  generatorBytecode?: string
}

export interface CoinRecord {
  parentCoinInfo: string
  puzzleHash: string
  amount: string
}

export interface BlockEvent {
  peerId: number
  height: number
  weight: string
  headerHash: string
  timestamp: number
  coinAdditions: Array<CoinRecord>
  coinRemovals: Array<CoinRecord>
  hasTransactionsGenerator: boolean
  generatorSize: number
  generatorBytecode?: string
}

export interface PeerConnectedEvent {
  peerId: number
  host: string
  port: number
}

export interface PeerDisconnectedEvent {
  peerId: number
  host: string
  port: number
  message?: string
}

export interface CoinSpend {
  coin: CoinRecord
  puzzleReveal: string
  solution: string
  realData: boolean
  parsingMethod: string
  offset: number
}

export interface TransactionGeneratorResult {
  success: boolean
  generatorSize: number
  generatorHex: string
  coinSpends: Array<CoinSpend>
  extractedSpends: boolean
}

export declare function initTracing(): void
export declare class ChiaBlockListener {
  constructor()
  addPeer(host: string, port: number, networkId: string): number
  disconnectPeer(peerId: number): boolean
  disconnectAllPeers(): void
  getConnectedPeers(): Array<number>
  on(event: 'blockReceived', callback: (block: BlockEvent) => void): void
  on(event: 'peerConnected', callback: (peer: PeerConnectedEvent) => void): void
  on(event: 'peerDisconnected', callback: (peer: PeerDisconnectedEvent) => void): void
  off(event: 'blockReceived', callback: (block: BlockEvent) => void): void
  off(event: 'peerConnected', callback: (peer: PeerConnectedEvent) => void): void
  off(event: 'peerDisconnected', callback: (peer: PeerDisconnectedEvent) => void): void
  getBlockByHeight(peerId: number, height: number): Block
  getBlocksRange(peerId: number, startHeight: number, endHeight: number): Array<Block>
  processTransactionGenerator(generatorHex: string): TransactionGeneratorResult
}
